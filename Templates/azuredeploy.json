{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "StorageAccountPrefix": {
      "type": "string",
      "metadata": {
        "description": "Storage Account Name Prefix"
      }
    },
    "KeyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Keyvault Name"
      },
      "defaultValue": "pwcKeyVault"
    },
    "KeyVaultkeyEncryptionKeyURL": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "URL of the KeyEncryptionKey used to encrypt the volume encryption key"
      }
    },
    "KeyVaultaadClientID": {
      "type": "string",
      "metadata": {
        "description": "Client ID of AAD app which has permissions to KeyVault"
      }
    },
    "KeyVaultaadClientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "Client Secret of AAD app which has permissions to KeyVault"
      }
    },
    "KeyVaultResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Keyvault ResourceGroup"
      },
      "defaultValue": "autorg"
    },
    "KeyVaultvolumeType": {
      "type": "string",
      "defaultValue": "OS",
      "allowedValues": [
        "OS",
        "Data",
        "All"
      ]
    },
      "storageAccountType": {
        "type": "string",
        "defaultValue": "Standard_LRS",
        "metadata": {
          "description": "Type of the Storage Account"
        }
      },
      "imageSKU": {
        "type": "string",
        "defaultValue": "2012-R2-Datacenter",
        "allowedValues": [
          "2008-R2-SP1",
          "2012-Datacenter",
          "2012-R2-Datacenter"
        ],
        "metadata": {
          "description": "Image SKU"
        }
      },
      "dnsNameforLBIP": {
        "type": "string",
        "metadata": {
          "description": "Unique DNS name"
        }
      },
      "modulesUrl": {
        "type": "string",
        "metadata": {
          "description": "URL for the DSC configuration module. "
        }
      },
      "PackageFeedUserName": {
        "type": "string",
        "metadata": {
          "description": "VSTS Package Feed UserName"
        }
      },
      "configurationFunction": {
        "type": "string",
        "metadata": {
          "description": "DSC Configuration Function"
        }
      },
      "PackageFeedPassword": {
        "type": "string",
        "metadata": {
          "description": "VSTS Package Feed Password"
        }
      },
      "ClientAccountList": {
        "type": "array",
        "metadata": {
          "description": "Get me the JSON Data"
        }
      }
    },
  "variables": {
    "_comment": "ResourceName for Bitlocker",
    "vmBitLockerExtensionName": "BitLocker",
    "virtualNetworkName": "dscVNET",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "vnetAddressPrefix": "10.0.0.0/16",
    "availabilitySetName": "pwcEMSet",
    "subnet1Name": "dscSubnet-1",
    "subnet1Prefix": "10.0.0.0/24",
    "subnet1Ref": "[concat(variables('vnetID'),'/subnets/', variables('subnet1Name'))]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
    "publicIPAddressType": "Dynamic",
    "publicIPAddressName": "DSCPUBIP",
    "nicName": "pwcNic",
    "imagePublisher": "MicrosoftWindowsServer",
    "imageOffer": "WindowsServer",
    "vmExtensionName": "dscExtension",
    "vmendPointExtensionName": "endPointExtension",
    "apiVersion": "2015-06-15",
    "StartRDPPort": 55388,
    "KeyVaultUrl": "[concat('https://', parameters('keyVaultName'), '.vault.azure.net/')]",
    "KeyVaultencryptionOperation": "EnableEncryption",
    "KeyVaultkeyEncryptionAlgorithm": "RSA-OAEP",
    "KeyVaultSequenceVersion": "1.0",
    "keyVaultResourceID": "[concat(subscription().id,'/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]",
    "lbFrontend": "lbFrontend",
    "LBNAME": "LOADBALANCER", //please use UPPERCASE until further notice
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('LBNAME'))]",
    
    "metricsresourceid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name ,'/providers/','Microsoft.Compute/virtualMachines/','RPLVMNAME')]",
    "wadlogs": "<WadCfg> <DiagnosticMonitorConfiguration overallQuotaInMB=\"4096\" xmlns=\"http://schemas.microsoft.com/ServiceHosting/2010/10/DiagnosticsConfiguration\"> <DiagnosticInfrastructureLogs scheduledTransferLogLevelFilter=\"Error\"/> <WindowsEventLog scheduledTransferPeriod=\"PT1M\" > <DataSource name=\"Application!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"Security!*[System[(Level = 1 or Level = 2)]]\" /> <DataSource name=\"System!*[System[(Level = 1 or Level = 2)]]\" /></WindowsEventLog>",
    "wadperfcounters": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Processor Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU utilization\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% Privileged Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU privileged time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor(_Total)\\% User Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor Information(_Total)\\Processor Frequency\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"CPU frequency\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\System\\Processes\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Processes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Thread Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Threads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Process(_Total)\\Handle Count\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Handles\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\% Committed Bytes In Use\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory usage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Available Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Committed Bytes\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory committed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\Commit Limit\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory commit limit\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
    "wadperfcounters2": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Read Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\% Disk Write Time\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk active write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Transfers/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Reads/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk read operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Writes/sec\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk write operations\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Read Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk(_Total)\\Disk Write Bytes/sec\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write speed\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\LogicalDisk(_Total)\\% Free Space\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Disk free space (percentage)\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
    "wadmetrics": "[concat('<Metrics resourceId=\"',variables('metricsresourceid'),'\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]",
    "wadcfgx": "[concat(variables('wadlogs'),variables('wadperfcounters'),variables('wadperfcounters2'),variables('wadmetrics'))]"

  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('StorageAccountPrefix')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsNameforLBIP')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": { }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "name": "[variables('LBNAME')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('lbFrontend')]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LBBackEnd"
          }
        ]

      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "name": "[concat(variables('LBNAME'),'/',parameters('ClientAccountList')[copyIndex()].vmname,'-RDP')]",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/',variables('LBNAME'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {

          "id": "[concat(variables('lbId'),'/frontendIPConfigurations/',variables('lbFrontend'))]"
        },
        "protocol": "tcp",
        "frontendPort": "[add(variables('StartRDPPort'), copyIndex(1))]",
        "backendPort": 3389,

        "enableFloatingIP": false
      },
      "copy": {
        "name": "lbRdpNatLoop",
        "count": "[length(parameters('ClientAccountList'))]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "name": "frontSecurityGroup",
      "type": "Microsoft.Network/networkSecurityGroups",
      "location": "[resourceGroup().location]",
      "tags": { },
      "properties": {
        "securityRules": [
          //{
          //  "name": "Allow-HTTP",
          //  "properties": {
          //    "protocol": "Tcp",
          //    "sourcePortRange": "*",
          //    "destinationPortRange": "80",
          //    "sourceAddressPrefix": "Internet",
          //    "destinationAddressPrefix": "*",
          //    "access": "Allow",
          //    "priority": 100,
          //    "direction": "Inbound"
          //  }
          //},
          {
            "name": "Allow-RDP",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "53389-53429",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 150,
              "direction": "Inbound"
            }
          },
          {
            "name": "Allow-Health-Monitoring",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          },
          {
            "name": "Disallow-everything-else",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 300,
              "direction": "Inbound"
            }
          },
          {
            "name": "Allow-to-VNet",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 100,
              "direction": "Outbound"
            }
          },
          {
            "name": "Deny-All-Traffic",
            "properties": {
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 200,
              "direction": "Outbound"
            }
          }
        ],
        "subnets": [ ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicName'),'-',copyIndex())]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/',variables('LBNAME'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/',variables('LBNAME'),'/inboundNatrules/',parameters('ClientAccountList')[copyIndex()].vmname,'-RDP')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(parameters('ClientAccountList')[copyIndex()].vmname,'-ipconfig')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              },
              "loadBalancerBackendAddressPools": [
                {

                  "id": "[concat(variables('lbID'), '/backendAddressPools/LBBackEnd')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbID'),'/inboundNatRules/',concat(parameters('ClientAccountList')[copyIndex()].vmname,'-RDP'))]"
                }
              ]
            }
          }
        ]
      },
      "copy": {
        "name": "nicCopy",
        "count": "[length(parameters('ClientAccountList'))]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('ClientAccountList')[copyIndex()].vmname]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('StorageAccountPrefix'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'),'-',copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('ClientAccountList')[copyIndex()].vmsize]"
        },
        "osProfile": {
          "computerName": "[parameters('ClientAccountList')[copyIndex()].vmname]",
          "adminUsername": "[parameters('ClientAccountList')[copyIndex()].username]",
          "adminPassword": "[parameters('ClientAccountList')[copyIndex()].Password]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',parameters('StorageAccountPrefix'),'.blob.core.windows.net/vhds/','vm',copyIndex(),'osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'),'-',copyIndex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://', parameters('StorageAccountPrefix'), '.blob.core.windows.net')]"
          }
        }
      },
      "copy": {
        "name": "vmCopy",
        "count": "[length(parameters('ClientAccountList'))]"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(concat(parameters('ClientAccountList')[copyIndex()].vmname,'/'),variables('vmExtensionName'))]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('ClientAccountList')[copyIndex()].vmname)]"
      ],
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.8",
        

      
        "settings": {
          "ModulesUrl": "[parameters('modulesUrl')]",
          "ConfigurationFunction": "[parameters('configurationFunction')]",
          //"SaSToken": "",
          "Properties": {
            "MachineName": "[parameters('ClientAccountList')[copyIndex()].vmname]",
            "pfUsername": "[parameters('PackageFeedUserName')]",
            "pfPassword": "[parameters('PackageFeedPassword')]",
            "storageAccountName": "[parameters('StorageAccountPrefix')]",
            "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountPrefix')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"

          }
        },
        "protectedSettings": null
      },
      "copy": {
        "name": "dscCopy",
        "count": "[length(parameters('ClientAccountList'))]"
      }
    }
    ,
    {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(concat(parameters('ClientAccountList')[copyIndex()].vmname,'/'),'Diagnostics')]",
        "apiVersion": "2015-05-01-preview",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Compute/virtualMachines/', parameters('ClientAccountList')[copyIndex()].vmname)]"
        ],
        "properties": {
          "publisher": "Microsoft.Azure.Diagnostics",
          "type": "IaaSDiagnostics",
          "typeHandlerVersion": "1.4",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "xmlCfg": "[base64(replace(variables('wadcfgx'),'RPLVMNAME',parameters('ClientAccountList')[copyIndex()].vmname))]",
            "StorageAccount": "[parameters('StorageAccountPrefix')]"
          },
          "protectedSettings": {
            "storageAccountName": "[parameters('StorageAccountPrefix')]",
            "storageAccountKey": "[listKeys(concat(resourceGroup().id,'/providers/Microsoft.Storage/storageAccounts/', parameters('StorageAccountPrefix')),'2015-05-01-preview').key1]",
            "storageAccountEndPoint": "https://core.windows.net/"
          }
        },
        "copy": {
          "name": "diagCopy",
          "count": "[length(parameters('ClientAccountList'))]"
        }
      }
  
    ,
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(concat(parameters('ClientAccountList')[copyIndex()].vmname,'/'),variables('vmendPointExtensionName'))]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('ClientAccountList')[copyIndex()].vmname)]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Security",
        "type": "IaaSAntimalware",
        "typeHandlerVersion": "1.1",
        "settings": {
          "AntimalwareEnabled": "true",
          "Exclusions": {
            "Paths": "C:\\Users",
            "Extensions": ".txt",
            "Processes": "taskmgr.exe"
          },
          "RealtimeProtectionEnabled": "true",
          "ScheduledScanSettings": {
            "isEnabled": "true",
            "scanType": "Quick",
            "day": "7",
            "time": "120"
          }
        },
        "protectedSettings": null
      },
      "copy": {
        "name": "endCopy",
        "count": "[length(parameters('ClientAccountList'))]"
      }
    }
    ,
    {
      "name": "[concat(parameters('ClientAccountList')[copyIndex()].vmname,'/',variables('vmBitLockerExtensionName'))]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('ClientAccountList')[copyIndex()].vmname)]"
      ],
      "location": "[resourceGroup().location]",
      "properties": {
        "publisher": "Microsoft.Azure.Security",
        "type": "AzureDiskEncryption",
        "typeHandlerVersion": "1.1",
        "autoUpgradeMinorVersion": true,
        "forceUpdateTag": "[variables('KeyVaultSequenceVersion')]",
        "settings": {
          "AADClientID": "[parameters('KeyVaultaadClientID')]",
          "KeyVaultURL": "[variables('KeyVaultUrl')]",
          "KeyEncryptionKeyURL": "[parameters('KeyVaultkeyEncryptionKeyURL')]",
          "KeyEncryptionAlgorithm": "[variables('KeyVaultkeyEncryptionAlgorithm')]",
          "VolumeType": "[parameters('KeyVaultvolumeType')]",
          "EncryptionOperation": "[variables('KeyVaultencryptionOperation')]"
        },
        "protectedSettings": {
          "AADClientSecret": "[parameters('KeyVaultaadClientSecret')]"
        }
      },
      "copy": {
        "name": "bitCopy",
        "count": "[length(parameters('ClientAccountList'))]"
      }
    }
    ,
    {
      "name": "[concat(parameters('ClientAccountList')[copyIndex()].vmname,'-','UpdatedToEncrypted')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/extensions',parameters('ClientAccountList')[copyIndex()].vmname,variables('vmBitLockerExtensionName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat('https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/201-encrypt-running-windows-vm/updatevm-nokek.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vmName": {
            "value": "[parameters('ClientAccountList')[copyIndex()].vmname]"
          },
          "keyVaultResourceID": {
            "value": "[variables('keyVaultResourceID')]"
          },
          "keyVaultSecretUrl": {
            "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions',  parameters('ClientAccountList')[copyIndex()].vmname, variables('vmBitLockerExtensionName'))).instanceView.statuses[0].message]"
          },
          "keyEncryptionKeyURL": {
            "value": "[parameters('KeyVaultkeyEncryptionKeyURL')]"
          }
        }
      },
      "copy": {
        "name": "bitCopy",
        "count": "[length(parameters('ClientAccountList'))]"
      }
    }
  ]
}
